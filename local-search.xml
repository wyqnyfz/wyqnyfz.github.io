<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>牛客 面试必刷TOP101 题解（3、二叉树）</title>
    <link href="/2023/02/10/10%E3%80%81%E7%89%9B%E5%AE%A2%20%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B7TOP101%20%E9%A2%98%E8%A7%A3%EF%BC%883%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/"/>
    <url>/2023/02/10/10%E3%80%81%E7%89%9B%E5%AE%A2%20%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B7TOP101%20%E9%A2%98%E8%A7%A3%EF%BC%883%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="23-二叉树的前序遍历"><a href="#23-二叉树的前序遍历" class="headerlink" title="23 二叉树的前序遍历"></a>23 二叉树的前序遍历</h2><p><img src="https://img-blog.csdnimg.cn/99d8ff0e491b442da5978a5afa700010.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct TreeNode *left;</span><br><span class="hljs-comment"> *struct TreeNode *right;</span><br><span class="hljs-comment"> *TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(TreeNode* r)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!r) <span class="hljs-keyword">return</span>;<br>        ans.<span class="hljs-built_in">push_back</span>(r-&gt;val);<br>        <span class="hljs-built_in">show</span>(r-&gt;left);<br>        <span class="hljs-built_in">show</span>(r-&gt;right);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param root TreeNode类 </span><br><span class="hljs-comment">     * @return int整型vector</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-built_in">show</span>(root);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="24-二叉树的中序遍历"><a href="#24-二叉树的中序遍历" class="headerlink" title="24 二叉树的中序遍历"></a>24 二叉树的中序遍历</h2><p><img src="https://img-blog.csdnimg.cn/7e392fcfc1ca4985977d2e70896252d8.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(TreeNode* r)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!r) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-built_in">show</span>(r-&gt;left);<br>        ans.<span class="hljs-built_in">push_back</span>(r-&gt;val);<br>        <span class="hljs-built_in">show</span>(r-&gt;right);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param root TreeNode类</span><br><span class="hljs-comment">     * @return int整型vector</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-built_in">show</span>(root);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="25-二叉树的后序遍历"><a href="#25-二叉树的后序遍历" class="headerlink" title="25 二叉树的后序遍历"></a>25 二叉树的后序遍历</h2><p><img src="https://img-blog.csdnimg.cn/44f053e0b3bf4ac89f303a6c9dfb1257.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">(TreeNode* r)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!r) <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-built_in">show</span>(r-&gt;left);<br><br>        <span class="hljs-built_in">show</span>(r-&gt;right);<br>        ans.<span class="hljs-built_in">push_back</span>(r-&gt;val);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param root TreeNode类</span><br><span class="hljs-comment">     * @return int整型vector</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-built_in">show</span>(root);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="26-求二叉树的层序遍历"><a href="#26-求二叉树的层序遍历" class="headerlink" title="26 求二叉树的层序遍历"></a>26 求二叉树的层序遍历</h2><p><img src="https://img-blog.csdnimg.cn/9601ada0466a41aa9b5ad56e2be00988.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct TreeNode *left;</span><br><span class="hljs-comment"> *struct TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param root TreeNode类 </span><br><span class="hljs-comment">     * @return int整型vector&lt;vector&lt;&gt;&gt;</span><br><span class="hljs-comment">     */</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">levelOrder</span>(TreeNode* root) &#123;<br>        <span class="hljs-comment">// write code here</span><br>      <br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; ans;<br>        vector&lt;<span class="hljs-type">int</span>&gt; Temp;<br>        queue&lt;TreeNode* &gt; Q;<br><br><br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> ans;<br>        Q.<span class="hljs-built_in">push</span>(root);<br>        Temp.<span class="hljs-built_in">push_back</span>(root-&gt;val);<br>        ans.<span class="hljs-built_in">push_back</span>(Temp);<br><br>        <span class="hljs-comment">// cout &lt;&lt; Q.size() &lt;&lt; endl;</span><br>        <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-comment">// cout &lt;&lt; Q.size() &lt;&lt; endl;</span><br>            queue&lt;TreeNode* &gt; TQ;<br>            Temp.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-type">int</span> m = ans.<span class="hljs-built_in">size</span>(); <br>            <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">size</span>()) &#123;<br>                TreeNode* cur = Q.<span class="hljs-built_in">front</span>();Q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(cur-&gt;left)&#123;<br>                    Temp.<span class="hljs-built_in">push_back</span>(cur-&gt;left-&gt;val);<br>                    TQ.<span class="hljs-built_in">push</span>(cur-&gt;left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(cur-&gt;right)&#123;<br>                    Temp.<span class="hljs-built_in">push_back</span>(cur-&gt;right-&gt;val);<br>                    TQ.<span class="hljs-built_in">push</span>(cur-&gt;right);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(Temp.<span class="hljs-built_in">size</span>())<br>                ans.<span class="hljs-built_in">push_back</span>(Temp);<br>            Q = TQ;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> ans;<br>        <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="27-按之字形顺序打印二叉树"><a href="#27-按之字形顺序打印二叉树" class="headerlink" title="27 按之字形顺序打印二叉树"></a>27 按之字形顺序打印二叉树</h2><p><img src="https://img-blog.csdnimg.cn/717d69f513ac472f88926c608ed1d954.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct TreeNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    struct TreeNode *left;</span><br><span class="hljs-comment">    struct TreeNode *right;</span><br><span class="hljs-comment">    TreeNode(int x) :</span><br><span class="hljs-comment">            val(x), left(NULL), right(NULL) &#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">Print</span>(TreeNode* pRoot) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; ans;<br>        vector&lt;<span class="hljs-type">int</span>&gt; Temp;<br>        queue&lt;TreeNode* &gt; Q;<br><br>        <span class="hljs-keyword">if</span>(!pRoot) <span class="hljs-keyword">return</span> ans;<br>        Q.<span class="hljs-built_in">push</span>(pRoot);<br>        Temp.<span class="hljs-built_in">push_back</span>(pRoot-&gt;val);<br>        ans.<span class="hljs-built_in">push_back</span>(Temp);<br>        <br>        <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">size</span>()) &#123;<br>            queue&lt;TreeNode* &gt; TQ;<br>            Temp.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-type">int</span> m = ans.<span class="hljs-built_in">size</span>(); <br>            <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">size</span>()) &#123;<br>                TreeNode* cur = Q.<span class="hljs-built_in">front</span>();Q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(cur-&gt;left)&#123;<br>                    Temp.<span class="hljs-built_in">push_back</span>(cur-&gt;left-&gt;val);<br>                    TQ.<span class="hljs-built_in">push</span>(cur-&gt;left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(cur-&gt;right)&#123;<br>                    Temp.<span class="hljs-built_in">push_back</span>(cur-&gt;right-&gt;val);<br>                    TQ.<span class="hljs-built_in">push</span>(cur-&gt;right);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(Temp.<span class="hljs-built_in">size</span>())&#123;<br>                <span class="hljs-keyword">if</span>(ans.<span class="hljs-built_in">size</span>()%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>                    vector&lt;<span class="hljs-type">int</span>&gt; e;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=Temp.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>                        e.<span class="hljs-built_in">push_back</span>(Temp[i]);<br>                    ans.<span class="hljs-built_in">push_back</span>(e);<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(Temp);<br>                &#125;<br>            &#125;<br>                <br>            Q = TQ;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="28-二叉树的最大深度"><a href="#28-二叉树的最大深度" class="headerlink" title="28 二叉树的最大深度"></a>28 二叉树的最大深度</h2><p><img src="https://img-blog.csdnimg.cn/7121a9ee4acb4bcd84546e005b89a7f0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct TreeNode *left;</span><br><span class="hljs-comment"> *struct TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">awm</span><span class="hljs-params">(TreeNode* T)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!T) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">awm</span>(T-&gt;left), <span class="hljs-built_in">awm</span>(T-&gt;right)) + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param root TreeNode类 </span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">awm</span>(root);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="29-二叉树中和为某一值的路径-一"><a href="#29-二叉树中和为某一值的路径-一" class="headerlink" title="29 二叉树中和为某一值的路径(一)"></a>29 二叉树中和为某一值的路径(一)</h2><p><img src="https://img-blog.csdnimg.cn/1e067416f8a544c5847d2cc8b3edf22f.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">awm</span><span class="hljs-params">(TreeNode* T, <span class="hljs-type">int</span> sum)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!T)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        sum -= T-&gt;val;<br>        <span class="hljs-keyword">if</span> (!T-&gt;left &amp;&amp; !T-&gt;right &amp;&amp; sum == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-built_in">awm</span>(T-&gt;left, sum) || <span class="hljs-built_in">awm</span>(T-&gt;right, sum);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param root TreeNode类</span><br><span class="hljs-comment">     * @param sum int整型</span><br><span class="hljs-comment">     * @return bool布尔型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> sum)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">awm</span>(root, sum);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="30-二叉搜索树与双向链表"><a href="#30-二叉搜索树与双向链表" class="headerlink" title="30 二叉搜索树与双向链表"></a>30 二叉搜索树与双向链表<img src="https://img-blog.csdnimg.cn/15d23297283e477c88f0d43023bcf814.png"></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct TreeNode &#123;</span><br><span class="hljs-comment">int val;</span><br><span class="hljs-comment">struct TreeNode *left;</span><br><span class="hljs-comment">struct TreeNode *right;</span><br><span class="hljs-comment">TreeNode(int x) :</span><br><span class="hljs-comment">val(x), left(NULL), right(NULL) &#123;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;;*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>TreeNode* head;<br>TreeNode* pre;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">Convert</span><span class="hljs-params">(TreeNode* pRootOfTree)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!pRootOfTree)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">Convert</span>(pRootOfTree-&gt;left);<br><span class="hljs-keyword">if</span>(head == <span class="hljs-literal">NULL</span>)&#123;<br>head = pRootOfTree;<br>pre = pRootOfTree;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>pre-&gt;right = pRootOfTree;<br>pRootOfTree-&gt;left = pre;<br>pre = pRootOfTree;<br>&#125;<br><span class="hljs-built_in">Convert</span>(pRootOfTree-&gt;right);<br><span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="31-对称的二叉树"><a href="#31-对称的二叉树" class="headerlink" title="31 对称的二叉树"></a>31 对称的二叉树</h2><p><img src="https://img-blog.csdnimg.cn/e957e292d29e4701a65b56d032236425.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct TreeNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    struct TreeNode *left;</span><br><span class="hljs-comment">    struct TreeNode *right;</span><br><span class="hljs-comment">    TreeNode(int x) :</span><br><span class="hljs-comment">            val(x), left(NULL), right(NULL) &#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">awm</span><span class="hljs-params">(TreeNode* T1,TreeNode* T2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!T1 &amp;&amp; !T2)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(!T1 || !T2 || T1-&gt;val!=T2-&gt;val)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">awm</span>(T1-&gt;left, T2-&gt;right) &amp;&amp; <span class="hljs-built_in">awm</span>(T1-&gt;right, T2-&gt;left);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSymmetrical</span><span class="hljs-params">(TreeNode* pRoot)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!pRoot) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">awm</span>(pRoot-&gt;left,pRoot-&gt;right);<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="32-合并二叉树"><a href="#32-合并二叉树" class="headerlink" title="32 合并二叉树"></a>32 合并二叉树</h2><p><img src="https://img-blog.csdnimg.cn/ef0b31d26093487aa1660d0004b4bff2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>   <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param t1 TreeNode类</span><br><span class="hljs-comment">     * @param t2 TreeNode类</span><br><span class="hljs-comment">     * @return TreeNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">mergeTrees</span><span class="hljs-params">(TreeNode* t1, TreeNode* t2)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span>(!t1)<br>            <span class="hljs-keyword">return</span> t2;<br>        <span class="hljs-keyword">if</span>(!t2)<br>            <span class="hljs-keyword">return</span> t1;<br>        TreeNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(t1-&gt;val+t2-&gt;val);<br>        node-&gt;left = <span class="hljs-built_in">mergeTrees</span>(t1-&gt;left, t2-&gt;left);<br>        node-&gt;right = <span class="hljs-built_in">mergeTrees</span>(t1-&gt;right, t2-&gt;right);<br>        <span class="hljs-keyword">return</span> node;<br>       <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="33-二叉树的镜像"><a href="#33-二叉树的镜像" class="headerlink" title="33 二叉树的镜像"></a>33 二叉树的镜像</h2><p><img src="https://img-blog.csdnimg.cn/fdb47cc62961402b8309c3ad6b5f198f.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param pRoot TreeNode类</span><br><span class="hljs-comment">     * @return TreeNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">Mirror</span><span class="hljs-params">(TreeNode* pRoot)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span> (!pRoot)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        TreeNode* temp = pRoot-&gt;right;<br>        pRoot-&gt;right = pRoot-&gt;left;<br>        pRoot-&gt;left = temp;<br>        <span class="hljs-keyword">if</span> (pRoot-&gt;left)<br>            <span class="hljs-built_in">Mirror</span>(pRoot-&gt;left);<br>        <span class="hljs-keyword">if</span> (pRoot-&gt;right)<br>            <span class="hljs-built_in">Mirror</span>(pRoot-&gt;right);<br>        <span class="hljs-keyword">return</span> pRoot;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="34-判断是不是二叉搜索树"><a href="#34-判断是不是二叉搜索树" class="headerlink" title="34 判断是不是二叉搜索树"></a>34 判断是不是二叉搜索树<img src="https://img-blog.csdnimg.cn/87902e803ffe46ad884ec4ae7477cd9e.png"></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">long</span> pre = INT_MIN;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param root TreeNode类</span><br><span class="hljs-comment">     * @return bool布尔型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isValidBST</span>(root-&gt;left))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(root-&gt;val &lt;= pre)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        pre = root-&gt;val;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isValidBST</span>(root-&gt;right))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="35-判断是不是完全二叉树"><a href="#35-判断是不是完全二叉树" class="headerlink" title="35 判断是不是完全二叉树"></a>35 判断是不是完全二叉树</h2><p><img src="https://img-blog.csdnimg.cn/03d367a3e67c467f94bdb7170ae7152d.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param root TreeNode类</span><br><span class="hljs-comment">     * @return bool布尔型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isCompleteTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        queue&lt;TreeNode*&gt; Q;<br>        Q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">size</span>()) &#123;<br>            TreeNode* node = Q.<span class="hljs-built_in">front</span>();<br>            Q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (p == <span class="hljs-number">1</span> &amp;&amp; node)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (!node) &#123;<br>                p = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                Q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="36-判断是不是平衡二叉树"><a href="#36-判断是不是平衡二叉树" class="headerlink" title="36 判断是不是平衡二叉树"></a>36 判断是不是平衡二叉树</h2><p><img src="https://img-blog.csdnimg.cn/ce2de930df1b404f904595c1e5f610ed.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">awm</span><span class="hljs-params">(TreeNode* t)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(!t) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> a = <span class="hljs-built_in">awm</span>(t-&gt;left);<br>        <span class="hljs-type">int</span> b = <span class="hljs-built_in">awm</span>(t-&gt;right);<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-number">-1</span> || b==<span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> c = <span class="hljs-built_in">abs</span>(a-b);<br>        <span class="hljs-keyword">if</span>(c == <span class="hljs-number">0</span> || c == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(a, b)+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsBalanced_Solution</span><span class="hljs-params">(TreeNode* pRoot)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-built_in">awm</span>(pRoot);<br>        <span class="hljs-keyword">return</span> ans!=<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="37-二叉搜索树的最近公共祖先"><a href="#37-二叉搜索树的最近公共祖先" class="headerlink" title="37 二叉搜索树的最近公共祖先"></a>37 二叉搜索树的最近公共祖先</h2><p><img src="https://img-blog.csdnimg.cn/a92d696d8523415ab86e7bdb10fc7e24.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> *  TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">awm</span><span class="hljs-params">(TreeNode* T, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!T || T-&gt;val == p || T-&gt;val == q)<br>            <span class="hljs-keyword">return</span> T;<br><br>        TreeNode* left = <span class="hljs-literal">NULL</span>;<br>        TreeNode* right = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span> (T-&gt;val &lt; <span class="hljs-built_in">min</span>(p, q)) &#123;<br>            left = <span class="hljs-literal">NULL</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            left = <span class="hljs-built_in">awm</span>(T-&gt;left, p, q);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (T-&gt;val &gt; <span class="hljs-built_in">max</span>(p, q)) &#123;<br>            right = <span class="hljs-literal">NULL</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right = <span class="hljs-built_in">awm</span>(T-&gt;right, p, q);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!left)<br>            <span class="hljs-keyword">return</span> right;<br>        <span class="hljs-keyword">if</span> (!right)<br>            <span class="hljs-keyword">return</span> left;<br>        <span class="hljs-keyword">return</span> T;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param root TreeNode类</span><br><span class="hljs-comment">     * @param p int整型</span><br><span class="hljs-comment">     * @param q int整型</span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">awm</span>(root, p, q)-&gt;val;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="38-在二叉树中找到两个节点的最近公共祖先"><a href="#38-在二叉树中找到两个节点的最近公共祖先" class="headerlink" title="38 在二叉树中找到两个节点的最近公共祖先"></a>38 在二叉树中找到两个节点的最近公共祖先</h2><p><img src="https://img-blog.csdnimg.cn/1cb8ffce9e8d48b083328f6885f74b67.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct TreeNode *left;</span><br><span class="hljs-comment"> *  struct TreeNode *right;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">awm</span><span class="hljs-params">(TreeNode* T, <span class="hljs-type">int</span> o1, <span class="hljs-type">int</span> o2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!T || T-&gt;val == o1 || T-&gt;val == o2)<br>            <span class="hljs-keyword">return</span> T;<br>        TreeNode* left = <span class="hljs-built_in">awm</span>(T-&gt;left, o1, o2);<br>        TreeNode* right = <span class="hljs-built_in">awm</span>(T-&gt;right, o1, o2);<br>        <span class="hljs-keyword">if</span>(!left)<br>            <span class="hljs-keyword">return</span> right;<br>        <span class="hljs-keyword">if</span>(!right)<br>            <span class="hljs-keyword">return</span> left;<br>        <span class="hljs-keyword">return</span> T;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param root TreeNode类</span><br><span class="hljs-comment">     * @param o1 int整型</span><br><span class="hljs-comment">     * @param o2 int整型</span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> o1, <span class="hljs-type">int</span> o2)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">awm</span>(root, o1, o2)-&gt;val;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="39-序列化二叉树"><a href="#39-序列化二叉树" class="headerlink" title="39 序列化二叉树"></a>39 序列化二叉树</h2><p><img src="https://img-blog.csdnimg.cn/37c60f7828e340148f9e4ea337e9a053.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct TreeNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    struct TreeNode *left;</span><br><span class="hljs-comment">    struct TreeNode *right;</span><br><span class="hljs-comment">    TreeNode(int x) :</span><br><span class="hljs-comment">            val(x), left(NULL), right(NULL) &#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>   <br>    <span class="hljs-function"><span class="hljs-type">char</span>* <span class="hljs-title">Serialize</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>       <br>        <span class="hljs-keyword">if</span> (!root) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;$&quot;</span>;<br>        string ans = <span class="hljs-string">&quot;&quot;</span>;<br>        queue&lt;TreeNode*&gt; Q;<br>        Q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">size</span>()) &#123;<br>            TreeNode* node = Q.<span class="hljs-built_in">front</span>();<br>            Q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (node) &#123;<br>                ans += <span class="hljs-built_in">to_string</span>(node-&gt;val) + <span class="hljs-string">&quot;|&quot;</span>;<br>                Q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                Q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                ans += <span class="hljs-string">&quot;#|&quot;</span>;<br>            &#125;<br>        &#125;<br>        ans += <span class="hljs-string">&quot;$&quot;</span>;<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>        <span class="hljs-type">char</span>* C = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[ans.<span class="hljs-built_in">length</span>() + <span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">strcpy</span>(C, ans.<span class="hljs-built_in">c_str</span>());<br>        C[ans.<span class="hljs-built_in">length</span>()] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        <span class="hljs-keyword">return</span> C;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">awm</span><span class="hljs-params">(<span class="hljs-type">int</span> p, vector&lt;<span class="hljs-type">int</span>&gt; V)</span> </span>&#123;<br>        cout &lt;&lt; V[p] &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span> (V[p] == <span class="hljs-number">-1</span> || p &gt;= V.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        TreeNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(V[p]);<br>        node-&gt;left = <span class="hljs-built_in">awm</span>(p * <span class="hljs-number">2</span>, V);<br>        node-&gt;right = <span class="hljs-built_in">awm</span>(p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, V);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">Deserialize</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (str[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;$&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; V;<br>        V.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (str[p] != <span class="hljs-string">&#x27;$&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (str[p] == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                V.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-1</span>);<br>                p++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">int</span> num = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (str[p] != <span class="hljs-string">&#x27;$&#x27;</span> &amp;&amp; str[p] != <span class="hljs-string">&#x27;|&#x27;</span>) &#123;<br>                    num *= <span class="hljs-number">10</span>;<br>                    num += str[p] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                    p++;<br>                &#125;<br>                V.<span class="hljs-built_in">push_back</span>(num);<br>            &#125;<br>            p++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; V.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (V[i] == <span class="hljs-number">-1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (i * <span class="hljs-number">2</span> &lt; V.<span class="hljs-built_in">size</span>()) &#123;<br>                    V.<span class="hljs-built_in">insert</span>(V.<span class="hljs-built_in">begin</span>() + i * <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>);<br>                    V.<span class="hljs-built_in">insert</span>(V.<span class="hljs-built_in">begin</span>() + i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; V.<span class="hljs-built_in">size</span>(); i++)<br>            cout &lt;&lt; V[i] &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>        cout &lt;&lt; endl;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">awm</span>(<span class="hljs-number">1</span>, V);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="40-重建二叉树"><a href="#40-重建二叉树" class="headerlink" title="40 重建二叉树"></a>40 重建二叉树</h2><p><img src="https://img-blog.csdnimg.cn/5a794fff69ab460e99b654d21edb3cbd.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for binary tree</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br><br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">reConstructBinaryTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; pre, vector&lt;<span class="hljs-type">int</span>&gt; vin)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len1 = pre.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> len2 = vin.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (!len1 || !len2)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        TreeNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(pre[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len2; i++) &#123;<br>            <span class="hljs-keyword">if</span> (pre[<span class="hljs-number">0</span>] == vin[i]) &#123;<br>                <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">lPre</span> <span class="hljs-params">(pre.begin() + <span class="hljs-number">1</span>, pre.begin() + i + <span class="hljs-number">1</span>)</span></span>;<br>                <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">lVin</span> <span class="hljs-params">(vin.begin(), vin.begin() + i)</span></span>;<br>                node-&gt;left = <span class="hljs-built_in">reConstructBinaryTree</span>(lPre, lVin);<br>                <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rPre</span> <span class="hljs-params">(pre.begin() + <span class="hljs-number">1</span> + i, pre.end())</span></span>;<br>                <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rVin</span> <span class="hljs-params">(vin.begin() + i + <span class="hljs-number">1</span>, vin.end())</span></span>;<br>                node-&gt;right = <span class="hljs-built_in">reConstructBinaryTree</span>(rPre, rVin);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="41-输出二叉树的右视图"><a href="#41-输出二叉树的右视图" class="headerlink" title="41 输出二叉树的右视图"></a>41 输出二叉树的右视图<img src="https://img-blog.csdnimg.cn/12175445c60a469a89b3dfce1ec38f09.png"></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">reConstructBinaryTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; pre, vector&lt;<span class="hljs-type">int</span>&gt; vin)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len1 = pre.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> len2 = vin.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (!len1 || !len2)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        TreeNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(pre[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len2; i++) &#123;<br>            <span class="hljs-keyword">if</span> (pre[<span class="hljs-number">0</span>] == vin[i]) &#123;<br>                <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">lPre</span> <span class="hljs-params">(pre.begin() + <span class="hljs-number">1</span>, pre.begin() + i + <span class="hljs-number">1</span>)</span></span>;<br>                <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">lVin</span> <span class="hljs-params">(vin.begin(), vin.begin() + i)</span></span>;<br>                node-&gt;left = <span class="hljs-built_in">reConstructBinaryTree</span>(lPre, lVin);<br>                <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rPre</span> <span class="hljs-params">(pre.begin() + <span class="hljs-number">1</span> + i, pre.end())</span></span>;<br>                <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rVin</span> <span class="hljs-params">(vin.begin() + i + <span class="hljs-number">1</span>, vin.end())</span></span>;<br>                node-&gt;right = <span class="hljs-built_in">reConstructBinaryTree</span>(rPre, rVin);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     * 求二叉树的右视图</span><br><span class="hljs-comment">     * @param xianxu int整型vector 先序遍历</span><br><span class="hljs-comment">     * @param zhongxu int整型vector 中序遍历</span><br><span class="hljs-comment">     * @return int整型vector</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">solve</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; xianxu, vector&lt;<span class="hljs-type">int</span>&gt;&amp; zhongxu)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        TreeNode* root = <span class="hljs-built_in">reConstructBinaryTree</span>(xianxu,zhongxu);<br><br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">if</span>(!root) <span class="hljs-keyword">return</span> ans;<br>        queue&lt;TreeNode*&gt; Q;<br>        Q.<span class="hljs-built_in">push</span>(root);<br>        <br>        <span class="hljs-keyword">while</span> (Q.<span class="hljs-built_in">size</span>()) &#123;<br><br>            queue&lt;TreeNode*&gt; temp;<br>            <span class="hljs-keyword">while</span>(Q.<span class="hljs-built_in">size</span>())&#123;<br>                TreeNode* node = Q.<span class="hljs-built_in">front</span>();Q.<span class="hljs-built_in">pop</span>();<br>                <br>                <span class="hljs-keyword">if</span>(node-&gt;left) temp.<span class="hljs-built_in">push</span>(node-&gt;left);<br>                <span class="hljs-keyword">if</span>(node-&gt;right) temp.<span class="hljs-built_in">push</span>(node-&gt;right);<br>         <br>                <span class="hljs-keyword">if</span>(!Q.<span class="hljs-built_in">size</span>())&#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(node-&gt;val);<br>                    Q = temp;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客 面试必刷TOP101 题解（2、二分查找_排序）</title>
    <link href="/2023/02/09/9%E3%80%81%E7%89%9B%E5%AE%A2%20%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B7TOP101%20%E9%A2%98%E8%A7%A3%EF%BC%882%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE_%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <url>/2023/02/09/9%E3%80%81%E7%89%9B%E5%AE%A2%20%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B7TOP101%20%E9%A2%98%E8%A7%A3%EF%BC%882%E3%80%81%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE_%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="17-二分查找-I"><a href="#17-二分查找-I" class="headerlink" title="17 二分查找-I"></a>17 二分查找-I</h2><p><img src="https://img-blog.csdnimg.cn/097d942631934c759a48bbccbf07c212.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param nums int整型vector </span><br><span class="hljs-comment">     * @param target int整型 </span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> r = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (l&lt;=r) &#123;<br>            <span class="hljs-type">int</span> m = (l + r) /<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[m] == target) <span class="hljs-keyword">return</span> m;<br>            <span class="hljs-keyword">if</span>(nums[m] &lt; target) <br>                l = m+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <br>                r = m<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="18-二维数组中的查找"><a href="#18-二维数组中的查找" class="headerlink" title="18 二维数组中的查找"></a>18 二维数组中的查找</h2><p><img src="https://img-blog.csdnimg.cn/3e7e036ec634421e836085503a45752b.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Find</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt; array)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(array.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> m = array.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = array[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> x = m<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x&gt;=<span class="hljs-number">0</span> &amp;&amp; y &lt;=n<span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-keyword">if</span>(array[x][y] == target) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span>(array[x][y] &lt; target) <br>                y++;<br>            <span class="hljs-keyword">else</span> <br>                x--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="19-寻找峰值"><a href="#19-寻找峰值" class="headerlink" title="19 寻找峰值"></a>19 寻找峰值</h2><p><img src="https://img-blog.csdnimg.cn/3d57e5dc2c4d419a8543bc3de7279d33.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param nums int整型vector </span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findPeakElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> r = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> m = (l+r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[m] &gt; nums[m+<span class="hljs-number">1</span>]) r = m;<br>            <span class="hljs-keyword">else</span> l = m + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="20-数组中的逆序对"><a href="#20-数组中的逆序对" class="headerlink" title="20 数组中的逆序对"></a>20 数组中的逆序对</h2><p><img src="https://img-blog.csdnimg.cn/c99265da75a94b80bdb6e2a6d1073523.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> mod =  <span class="hljs-number">1000000007</span>;<br>    <span class="hljs-type">int</span>* mydata;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">awm</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;data, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt;= r)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-built_in">awm</span>(data, l, m) + <span class="hljs-built_in">awm</span>(data, m + <span class="hljs-number">1</span>, r);<br>        ans %= mod;<br>        <span class="hljs-type">int</span> p1 = l;<br>        <span class="hljs-type">int</span> p2 = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++) &#123;<br>            <span class="hljs-keyword">if</span> (p1 == m + <span class="hljs-number">1</span>) &#123;<br>                mydata[i] = data[p2++];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p2 == r + <span class="hljs-number">1</span>) &#123;<br>                mydata[i] = data[p1++];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (data[p1] &gt; data[p2]) &#123;<br>                    ans += m - p1 + <span class="hljs-number">1</span>;<br>                    ans %= mod;<br>                    mydata[i] = data[p2++];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    mydata[i] = data[p1++];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r ; i++)&#123;<br>            data[i] = mydata[i];<br>            <br>        &#125;<br>        <span class="hljs-keyword">return</span> ans % mod;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InversePairs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; data)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = data.<span class="hljs-built_in">size</span>();<br>        mydata = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n+<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">awm</span>(data, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="21-旋转数组的最小数字"><a href="#21-旋转数组的最小数字" class="headerlink" title="21 旋转数组的最小数字"></a>21 旋转数组的最小数字</h2><p><img src="https://img-blog.csdnimg.cn/22de87b6f4d9425397a70bf61b17ed67.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minNumberInRotateArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; rotateArray)</span> </span>&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> r = rotateArray.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (l&lt;r) &#123;<br>            <span class="hljs-type">int</span> m = (l + r) /<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(rotateArray[m] &gt; rotateArray[r])&#123;<br>                l = m+<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rotateArray[m] == rotateArray[r])&#123;<br>                r--;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                r = m;<br>            &#125;<br>        &#125;<br><br>         <span class="hljs-keyword">return</span> rotateArray[r];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="22-比较版本号"><a href="#22-比较版本号" class="headerlink" title="22 比较版本号"></a>22 比较版本号</h2><p><img src="https://img-blog.csdnimg.cn/0364381ef1944e028559930a13671aee.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 比较版本号</span><br><span class="hljs-comment">     * @param version1 string字符串</span><br><span class="hljs-comment">     * @param version2 string字符串</span><br><span class="hljs-comment">     * @return int整型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(string version1, string version2)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        version1 += <span class="hljs-string">&quot;.&quot;</span>;<br>        version2 += <span class="hljs-string">&quot;.&quot;</span>;<br>        <span class="hljs-type">int</span> num1 = <span class="hljs-number">0</span>, p1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> num2 = <span class="hljs-number">0</span>, p2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            num1 = <span class="hljs-number">0</span>;<br>            num2 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (p1 == version1.<span class="hljs-built_in">length</span>()) &#123;<br>                num1 = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> (version1[p1] != <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                    num1 *= <span class="hljs-number">10</span>;<br>                    num1 += version1[p1++] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                &#125;<br>                p1++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (p2 == version2.<span class="hljs-built_in">length</span>()) &#123;<br>                num2 = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">while</span> (version2[p2] != <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                    num2 *= <span class="hljs-number">10</span>;<br>                    num2 += version2[p2++] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                &#125;<br>                p2++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (num1 &gt; num2) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (num1 &lt; num2) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span> (p1 == version1.<span class="hljs-built_in">length</span>() &amp;&amp; p2 == version2.<span class="hljs-built_in">length</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>二分查找_排序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客 面试必刷TOP101 题解（1、链表）</title>
    <link href="/2023/02/08/8%E3%80%81%E7%89%9B%E5%AE%A2%20%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B7TOP101%20%E9%A2%98%E8%A7%A3%EF%BC%881%E3%80%81%E9%93%BE%E8%A1%A8%EF%BC%89/"/>
    <url>/2023/02/08/8%E3%80%81%E7%89%9B%E5%AE%A2%20%E9%9D%A2%E8%AF%95%E5%BF%85%E5%88%B7TOP101%20%E9%A2%98%E8%A7%A3%EF%BC%881%E3%80%81%E9%93%BE%E8%A1%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-反转链表"><a href="#1-反转链表" class="headerlink" title="1 反转链表"></a>1 <strong>反转链表</strong></h2><p><img src="https://img-blog.csdnimg.cn/97de9a3c42e64df2ae3f75bfae7019e1.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct ListNode &#123;</span><br><span class="hljs-comment">int val;</span><br><span class="hljs-comment">struct ListNode *next;</span><br><span class="hljs-comment">ListNode(int x) :</span><br><span class="hljs-comment">val(x), next(NULL) &#123;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;;*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">ReverseList</span><span class="hljs-params">(ListNode* pHead)</span> </span>&#123;<br>ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>ListNode* p = pHead;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>ListNode* next = p-&gt;next;<br>p-&gt;next = ans-&gt;next;<br>ans-&gt;next = p;<br>p = next;<br>&#125;<br><span class="hljs-keyword">return</span> ans-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-链表内指定区间反转"><a href="#2-链表内指定区间反转" class="headerlink" title="2 链表内指定区间反转"></a><strong>2</strong> <strong>链表内指定区间反转</strong></h2><p><img src="https://img-blog.csdnimg.cn/2615401ce67e427d9820057649dcd035.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param head ListNode类 </span><br><span class="hljs-comment">     * @param m int整型 </span><br><span class="hljs-comment">     * @param n int整型 </span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>       ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>       ans-&gt;next=head;<br>       ListNode* pre = ans;<br>       ListNode* cur = head;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)&#123;<br>            pre = cur;<br>            cur = cur-&gt;next;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m;i&lt;n;i++)&#123;<br>        ListNode* tem = cur-&gt;next;<br>        cur-&gt;next = tem-&gt;next;<br>        tem-&gt;next = pre-&gt;next;<br>        pre-&gt;next = tem;<br>       &#125;<br>       <span class="hljs-keyword">return</span> ans-&gt;next;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="3-链表中的节点每k个一组翻转"><a href="#3-链表中的节点每k个一组翻转" class="headerlink" title="3 链表中的节点每k个一组翻转"></a><strong>3</strong> <strong>链表中的节点每k个一组翻转</strong></h2><p><img src="https://img-blog.csdnimg.cn/f7e2698908224825b8628ba2bda3fa67.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param head ListNode类 </span><br><span class="hljs-comment">     * @param k int整型 </span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        ListNode* tail = head;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            <span class="hljs-keyword">if</span>(tail == <span class="hljs-literal">NULL</span>)<br>                <span class="hljs-keyword">return</span> head;<br>            tail = tail-&gt;next;<br>        &#125;<br>        ListNode* pre = <span class="hljs-literal">NULL</span>;<br>        ListNode* cur = head;<br>        <span class="hljs-keyword">while</span> (cur != tail) &#123;<br>            ListNode* temp = cur-&gt;next;<br>            cur-&gt;next = pre;<br>            pre = cur;<br>            cur = temp;<br>        &#125;<br>        head-&gt;next = <span class="hljs-built_in">reverseKGroup</span>(cur, k);<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4-合并两个排序的链表"><a href="#4-合并两个排序的链表" class="headerlink" title="4 合并两个排序的链表"></a><strong>4</strong> <strong>合并两个排序的链表</strong></h2><p><img src="https://img-blog.csdnimg.cn/05b0f282fa8c4d60b004be4a5a2b0a68.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct ListNode &#123;</span><br><span class="hljs-comment">int val;</span><br><span class="hljs-comment">struct ListNode *next;</span><br><span class="hljs-comment">ListNode(int x) :</span><br><span class="hljs-comment">val(x), next(NULL) &#123;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;;*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">Merge</span><span class="hljs-params">(ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;<br>        ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>ListNode* p = ans;<br>ListNode* p1 = pHead1;<br>ListNode* p2 = pHead2;<br><span class="hljs-keyword">while</span> (p1 != <span class="hljs-literal">NULL</span> &amp;&amp; p2 != <span class="hljs-literal">NULL</span>) &#123;<br>ListNode* temp = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span>(p1-&gt;val &lt;= p2-&gt;val)&#123;<br>temp = p1;<br>p1 = p1-&gt;next;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>temp = p2;<br>p2 = p2-&gt;next;<br>&#125;<br>p-&gt;next = temp;<br>p = temp;<br>&#125;<br><span class="hljs-keyword">if</span>(p1 != <span class="hljs-literal">NULL</span>) p-&gt;next = p1;<br><span class="hljs-keyword">if</span>(p2 != <span class="hljs-literal">NULL</span>)p-&gt;next = p2;<br><span class="hljs-keyword">return</span> ans-&gt;next;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="5-合并k个已排序的链表"><a href="#5-合并k个已排序的链表" class="headerlink" title="5 合并k个已排序的链表"></a><strong>5</strong> <strong>合并k个已排序的链表</strong></h2><p><img src="https://img-blog.csdnimg.cn/f670fbfd833e40c89b434b961a5c7098.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">mergeKLists</span><span class="hljs-params">(vector&lt;ListNode *&gt; &amp;lists)</span> </span>&#123;<br>        ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode* tail = ans;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>, t = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;lists.<span class="hljs-built_in">size</span>();i++)&#123;<br>                <span class="hljs-keyword">if</span>(lists[i] != <span class="hljs-literal">NULL</span>)&#123;<br>                    p++;<br>                    <span class="hljs-keyword">if</span>(t == <span class="hljs-number">-1</span> || lists[t]-&gt;val &gt; lists[i]-&gt;val)&#123;<br>                        t = i;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(p == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            tail-&gt;next = lists[t];<br>            tail = tail-&gt;next;<br>            lists[t] = lists[t]-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="6-判断链表中是否有环"><a href="#6-判断链表中是否有环" class="headerlink" title="6 判断链表中是否有环"></a><strong>6</strong> <strong>判断链表中是否有环</strong></h2><p><img src="https://img-blog.csdnimg.cn/efc721234ced42188cfebd2d6baa660d.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode *head)</span> </span>&#123;<br>        ListNode* p1 = head;<br>        ListNode* p2 = head;<br>        <span class="hljs-keyword">while</span> (p2 != <span class="hljs-literal">NULL</span> &amp;&amp; p2-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            p2 = p2-&gt;next-&gt;next;<br>            p1 = p1 -&gt;next;<br>            <span class="hljs-keyword">if</span>(p1 == p2)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="7-链表中环的入口结点"><a href="#7-链表中环的入口结点" class="headerlink" title="7 链表中环的入口结点"></a><strong>7</strong> <strong>链表中环的入口结点</strong></h2><p><img src="https://img-blog.csdnimg.cn/8425dd2092c94157becf98571e8b2757.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct ListNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    struct ListNode *next;</span><br><span class="hljs-comment">    ListNode(int x) :</span><br><span class="hljs-comment">        val(x), next(NULL) &#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">EntryNodeOfLoop</span><span class="hljs-params">(ListNode* pHead)</span> </span>&#123;<br>        ListNode* p1 = pHead;<br>        ListNode* p2 = pHead;<br>        <span class="hljs-keyword">while</span> (p2 != <span class="hljs-literal">NULL</span> &amp;&amp; p2-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            p1 = p1-&gt;next;<br>            p2 = p2-&gt;next-&gt;next;<br>            <span class="hljs-keyword">if</span>(p1 == p2)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(p2==<span class="hljs-literal">NULL</span> || p2-&gt;next==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        p1 = pHead;<br>        <span class="hljs-keyword">while</span>(p1 != p2)&#123;<br>            p1 = p1-&gt;next;<br>            p2 = p2-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="8-链表中倒数最后k个结点"><a href="#8-链表中倒数最后k个结点" class="headerlink" title="8 链表中倒数最后k个结点"></a><strong>8</strong> <strong>链表中倒数最后k个结点</strong></h2><p><img src="https://img-blog.csdnimg.cn/94df34232aa04215900bdbc6cc807a88.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct ListNode *next;</span><br><span class="hljs-comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param pHead ListNode类 </span><br><span class="hljs-comment">     * @param k int整型 </span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">FindKthToTail</span><span class="hljs-params">(ListNode* pHead, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span>(pHead == <span class="hljs-literal">NULL</span> || k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ListNode* p1 = pHead;<br>        ListNode* p2 = pHead;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;k &amp;&amp; p2!=<span class="hljs-literal">NULL</span>;i++)<br>            p2 = p2-&gt;next;<br>        <span class="hljs-keyword">if</span>(p2 == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">while</span> (p2-&gt;next!=<span class="hljs-literal">NULL</span>) &#123;<br>            p1 = p1-&gt;next;<br>            p2 = p2-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="9-删除链表的倒数第n个节点"><a href="#9-删除链表的倒数第n个节点" class="headerlink" title="9 删除链表的倒数第n个节点"></a><strong>9</strong> <strong>删除链表的倒数第n个节点</strong></h2><p><img src="https://img-blog.csdnimg.cn/9fa5ba3ffae044c69c4193b0d8f2a81e.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param head ListNode类 </span><br><span class="hljs-comment">     * @param n int整型 </span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span> || n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> head;<br>        ListNode* my = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        my-&gt;next = head;<br>        ListNode* p1 = my;<br>        ListNode* p2 = my;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n+<span class="hljs-number">1</span>;i++)&#123;<br>    <br>            p2 = p2-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (p2!=<span class="hljs-literal">NULL</span>) &#123;<br>            p2 = p2-&gt;next;<br>            p1 = p1-&gt;next;<br>        &#125;<br>        p1-&gt;next = p1-&gt;next-&gt;next;<br>        <span class="hljs-keyword">return</span> my-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="10-两个链表的第一个公共结点"><a href="#10-两个链表的第一个公共结点" class="headerlink" title="10 两个链表的第一个公共结点"></a><strong>10</strong> <strong>两个链表的第一个公共结点</strong></h2><p><img src="https://img-blog.csdnimg.cn/b95943d80a6f4ef88ef6667738ffb820.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">struct ListNode &#123;</span><br><span class="hljs-comment">    int val;</span><br><span class="hljs-comment">    struct ListNode *next;</span><br><span class="hljs-comment">    ListNode(int x) :</span><br><span class="hljs-comment">            val(x), next(NULL) &#123;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;;*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">FindFirstCommonNode</span><span class="hljs-params">( ListNode* pHead1, ListNode* pHead2)</span> </span>&#123;<br>        <br><span class="hljs-keyword">if</span>(pHead1==<span class="hljs-literal">NULL</span> || pHead2==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>ListNode* p1 = pHead1;<br>        ListNode* p2 = pHead2;<br><span class="hljs-keyword">while</span>(p1 != p2)&#123;<br>p1 = p1-&gt;next;<br>p2 = p2-&gt;next;<br><span class="hljs-keyword">if</span>(p1==<span class="hljs-literal">NULL</span> &amp;&amp; p2 == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span>(p1 == <span class="hljs-literal">NULL</span>) p1 = pHead2;<br><span class="hljs-keyword">if</span>(p2 == <span class="hljs-literal">NULL</span>) p2 = pHead1;<br>&#125;<br><span class="hljs-keyword">return</span> p1;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="11-链表相加-二"><a href="#11-链表相加-二" class="headerlink" title="11 链表相加(二)"></a><strong>11</strong> <strong>链表相加(二)</strong></h2><p><img src="https://img-blog.csdnimg.cn/6917835cf8844eb794533ddc6d72dbe8.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reviseList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode* p = head;<br>        <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>) &#123;<br>            ListNode* temp = p-&gt;next;<br>            p-&gt;next = ans-&gt;next;<br>            ans-&gt;next = p;<br>            p = temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param head1 ListNode类 </span><br><span class="hljs-comment">     * @param head2 ListNode类 </span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">addInList</span><span class="hljs-params">(ListNode* head1, ListNode* head2)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        head1 = <span class="hljs-built_in">reviseList</span>(head1);<br>        head2 = <span class="hljs-built_in">reviseList</span>(head2);<br>        ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> t =<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!(head1==<span class="hljs-literal">NULL</span> &amp;&amp; head2==<span class="hljs-literal">NULL</span>)) &#123;<br>            <span class="hljs-type">int</span> a = head1==<span class="hljs-literal">NULL</span> ? <span class="hljs-number">0</span>:head1-&gt;val;<br>            <span class="hljs-type">int</span> b = head2==<span class="hljs-literal">NULL</span> ? <span class="hljs-number">0</span>:head2-&gt;val;<br>            <span class="hljs-type">int</span> c = a + b + t;<br><br>            t = c / <span class="hljs-number">10</span>;<br>            ListNode* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(c%<span class="hljs-number">10</span>);<br>            temp-&gt;next = ans-&gt;next;<br>            ans-&gt;next = temp;<br>            <span class="hljs-keyword">if</span>(head1) head1=head1-&gt;next;<br>            <span class="hljs-keyword">if</span>(head2) head2=head2-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(t != <span class="hljs-number">0</span>)&#123;<br>            ListNode* temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(t);<br>            temp-&gt;next = ans-&gt;next;<br>            ans-&gt;next = temp;<br>        &#125;<br>  <br>        <span class="hljs-keyword">return</span> ans-&gt;next;<br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="12-单链表的排序"><a href="#12-单链表的排序" class="headerlink" title="12 单链表的排序"></a><strong>12</strong> <strong>单链表的排序</strong></h2><p><img src="https://img-blog.csdnimg.cn/0bdcfd708a09460aa847daa38fc95acf.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">merList</span><span class="hljs-params">(ListNode* h1, ListNode* h2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (h1 == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> h2;<br>        <span class="hljs-keyword">if</span> (h2 == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> h1;<br>        ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode* p = ans;<br>        <span class="hljs-keyword">while</span> (h1 != <span class="hljs-literal">NULL</span> &amp;&amp; h2 != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">if</span> (h1-&gt;val &lt; h2-&gt;val) &#123;<br>                p-&gt;next = h1;<br>                p = h1;<br>                h1 = h1-&gt;next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                p-&gt;next = h2;<br>                p = h2;<br>                h2 = h2-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (h1 != <span class="hljs-literal">NULL</span>) p-&gt;next = h1;<br>        <span class="hljs-keyword">if</span> (h2 != <span class="hljs-literal">NULL</span>) p-&gt;next = h2;<br>        <span class="hljs-keyword">return</span> ans-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param head ListNode类 the head node</span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">sortInList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span> || head-&gt;next == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> head;<br>        ListNode* p1 = head;<br>        ListNode* p2 = head-&gt;next;<br>        ListNode* p3 = head-&gt;next-&gt;next;<br>        <span class="hljs-keyword">while</span> (p3 != <span class="hljs-literal">NULL</span> &amp;&amp; p3-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>            p1 = p1-&gt;next;<br>            p2 = p2-&gt;next;<br>            p3 = p3-&gt;next-&gt;next;<br>        &#125;<br>        p1-&gt;next = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">merList</span>(<span class="hljs-built_in">sortInList</span>(head),<span class="hljs-built_in">sortInList</span>(p2));<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="13-判断一个链表是否为回文结构"><a href="#13-判断一个链表是否为回文结构" class="headerlink" title="13 判断一个链表是否为回文结构"></a><strong>13</strong> <strong>判断一个链表是否为回文结构</strong></h2><p><img src="https://img-blog.csdnimg.cn/05523cdc203242ee88f14f03de167ea0.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param head ListNode类 the head</span><br><span class="hljs-comment">     * @return bool布尔型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPail</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        vector&lt;<span class="hljs-type">int</span>&gt; nums;<br>        ListNode* p = head;<br>        <span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>) &#123;<br>            nums.<span class="hljs-built_in">push_back</span>(p-&gt;val);<br>            p = p-&gt;next;<br>        &#125;<br>            <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] != nums[nums.<span class="hljs-built_in">size</span>()-i<span class="hljs-number">-1</span>])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="14-链表的奇偶重排"><a href="#14-链表的奇偶重排" class="headerlink" title="14 链表的奇偶重排"></a><strong>14</strong> <strong>链表的奇偶重排</strong></h2><p><img src="https://img-blog.csdnimg.cn/7d555b36a4e540d4a64e48ad9da3f9ab.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct ListNode *next;</span><br><span class="hljs-comment"> *ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param head ListNode类 </span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">oddEvenList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span>(!head) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ListNode* L1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode* p1 = L1;<br>        ListNode* L2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ListNode* p2 = L2;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;head!=<span class="hljs-literal">NULL</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>                p1-&gt;next = head;<br>                p1 = head;<br>                head = head-&gt;next;<br>                p1-&gt;next = <span class="hljs-literal">NULL</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                p2-&gt;next = head;<br>                p2 = head;<br>                head = head-&gt;next;<br>                p2-&gt;next = <span class="hljs-literal">NULL</span>;<br>            &#125;<br>        &#125;<br>        p1-&gt;next = L2-&gt;next;<br>        <span class="hljs-keyword">return</span> L1-&gt;next;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="15-删除有序链表中重复的元素-I"><a href="#15-删除有序链表中重复的元素-I" class="headerlink" title="15 删除有序链表中重复的元素-I"></a><strong>15</strong> <strong>删除有序链表中重复的元素-I</strong></h2><p><img src="https://img-blog.csdnimg.cn/9df52d01cb124d4198324619c6eef472.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *int val;</span><br><span class="hljs-comment"> *struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * @param head ListNode类 </span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        ListNode* pre = head;<br>        ListNode* cur = head-&gt;next;<br>        <span class="hljs-type">int</span> x = pre-&gt;val;<br>        <span class="hljs-keyword">while</span> (cur) &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;val == x)&#123;<br>                pre-&gt;next = cur-&gt;next;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                x = cur-&gt;val;<br>                pre = cur;<br>            &#125;<br>            cur = cur-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="16-删除有序链表中重复的元素-II"><a href="#16-删除有序链表中重复的元素-II" class="headerlink" title="16 删除有序链表中重复的元素-II"></a><strong>16</strong> <strong>删除有序链表中重复的元素-II</strong></h2><p><img src="https://img-blog.csdnimg.cn/e27c4c1c86bf41f6a0e2fd36370bcbd1.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *  int val;</span><br><span class="hljs-comment"> *  struct ListNode *next;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param head ListNode类</span><br><span class="hljs-comment">     * @return ListNode类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-comment">// write code here</span><br>        <span class="hljs-keyword">if</span> (!head) <span class="hljs-keyword">return</span> head;<br>        ListNode* ans = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>);<br>        ans-&gt;next = head;<br>        ListNode* pre = ans;<br>        ListNode* cur = head;<br>        <span class="hljs-keyword">while</span> (cur) &#123;<br>            <span class="hljs-type">int</span> x = cur-&gt;val;<br>            <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>            ListNode* p = cur;<br>            <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;val == x) &#123;<br>                n++;<br>                p = p-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (n != <span class="hljs-number">1</span>) &#123;<br>                pre-&gt;next = p;<br>                cur = p;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                pre = cur;<br>                cur = cur-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans-&gt;next;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>链表</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo提交流程</title>
    <link href="/2022/12/31/7%E3%80%81hexo%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/12/31/7%E3%80%81hexo%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1、在博客项目目录打开cmd"><a href="#1、在博客项目目录打开cmd" class="headerlink" title="1、在博客项目目录打开cmd"></a>1、在博客项目目录打开cmd</h2><p>进入博客目录<br><img src="https://img-blog.csdnimg.cn/aa0b00ef97f64149bda742effd44f096.png"><br>打开cmd<br><img src="https://img-blog.csdnimg.cn/39e72cefc7ea48c5a01fc4315d300976.png"><br>注意路径<br><img src="https://img-blog.csdnimg.cn/d8e574a908bf4112a95f2c34d5d83f16.png"></p><h2 id="2、输入命令"><a href="#2、输入命令" class="headerlink" title="2、输入命令"></a>2、输入命令</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> clean<br>hexo g<br>hexo d<br><br>hexo s  <span class="hljs-comment">#本地运行查看，可以不输入</span><br></code></pre></td></tr></table></figure><h2 id="3、结束（有坑）"><a href="#3、结束（有坑）" class="headerlink" title="3、结束（有坑）"></a>3、结束（有坑）</h2><p>账号是githhub账号<br>密码不是登录密码，在密码中输入密钥进行登录</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github本地上传分支项目</title>
    <link href="/2022/12/31/6%E3%80%81github%20%E6%9C%AC%E5%9C%B0%E4%B8%8A%E4%BC%A0%E5%88%86%E6%94%AF%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/12/31/6%E3%80%81github%20%E6%9C%AC%E5%9C%B0%E4%B8%8A%E4%BC%A0%E5%88%86%E6%94%AF%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1、github账号、建立一个github仓库"><a href="#1、github账号、建立一个github仓库" class="headerlink" title="1、github账号、建立一个github仓库"></a>1、github账号、建立一个github仓库</h2><h2 id="2、本地建立一个新的空文件夹"><a href="#2、本地建立一个新的空文件夹" class="headerlink" title="2、本地建立一个新的空文件夹"></a>2、本地建立一个新的空文件夹</h2><p><img src="https://img-blog.csdnimg.cn/2eb05e5cf51c446c886cb66e6e6fb42d.png"></p><h2 id="3、右键打开git-Bash"><a href="#3、右键打开git-Bash" class="headerlink" title="3、右键打开git Bash"></a>3、右键打开git Bash</h2><p><img src="https://img-blog.csdnimg.cn/484cd828c1b84388b7a870f6a1044e9d.png"></p><h2 id="4、克隆项目"><a href="#4、克隆项目" class="headerlink" title="4、克隆项目"></a>4、克隆项目</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;这里是你的仓库地址&gt;</span><br><span class="hljs-title">如：</span><br><span class="hljs-title">git</span> <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/wyqnyfz/daohang.git<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/1179edb1a9d84574bcd9d7ef705ab9e5.png"></p><h2 id="5、进入本地仓库"><a href="#5、进入本地仓库" class="headerlink" title="5、进入本地仓库"></a>5、进入本地仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;文件名&gt;<br>如：<br><span class="hljs-built_in">cd</span> daohang<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5c0eb701c4294b51b702f18b17759987.png"></p><h2 id="6、切换分支（默认main分支，可选择跳过）"><a href="#6、切换分支（默认main分支，可选择跳过）" class="headerlink" title="6、切换分支（默认main分支，可选择跳过）"></a>6、切换分支（默认main分支，可选择跳过）</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>-a      <span class="hljs-comment">#查看有哪些分支</span><br><br>git checkout -<span class="hljs-keyword">b </span>dh-page<span class="hljs-comment">#切换到 dh-page分支</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/310687b5839042199956239f9f27c828.png"></p><h2 id="7、把文件放到当前文件夹"><a href="#7、把文件放到当前文件夹" class="headerlink" title="7、把文件放到当前文件夹"></a>7、把文件放到当前文件夹</h2><p>如果同文件名，就选择覆盖<br><img src="https://img-blog.csdnimg.cn/f261b02afcb445a4a4d8829b2c525818.png"></p><h2 id="8、输入命令"><a href="#8、输入命令" class="headerlink" title="8、输入命令"></a>8、输入命令</h2><p>开始上传</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">git init<br><br>git <span class="hljs-keyword">add</span> .<br><br>git commit -m “你的提交信息”<br><br>git <span class="hljs-keyword">push</span>     <span class="hljs-meta">#main分支用这个</span><br>git <span class="hljs-keyword">push</span> --<span class="hljs-keyword">set</span>-upstream origin dh-page<span class="hljs-meta">#其他分支用这个</span><br><br></code></pre></td></tr></table></figure><h2 id="9、输入账号密码即可"><a href="#9、输入账号密码即可" class="headerlink" title="9、输入账号密码即可"></a>9、输入账号密码即可</h2><p>这里要注意，账号就是原账号</p><p>密码要填写密钥，因为最近github改动了，登录密码不能使用</p><p>不知道密钥咋搞，自行百度吧，这一关逃不过的</p><h2 id="10、去项目里面看一下，成功了"><a href="#10、去项目里面看一下，成功了" class="headerlink" title="10、去项目里面看一下，成功了"></a>10、去项目里面看一下，成功了</h2><p><img src="https://img-blog.csdnimg.cn/e77990b5aa094dd5af014779791bef2f.png"></p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
      <category>操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue 打包构建后，打开出现白板</title>
    <link href="/2022/12/31/5%E3%80%81vue%20%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%90%8E%EF%BC%8C%E6%89%93%E5%BC%80%E5%87%BA%E7%8E%B0%E7%99%BD%E6%9D%BF/"/>
    <url>/2022/12/31/5%E3%80%81vue%20%E6%89%93%E5%8C%85%E6%9E%84%E5%BB%BA%E5%90%8E%EF%BC%8C%E6%89%93%E5%BC%80%E5%87%BA%E7%8E%B0%E7%99%BD%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="1、现象"><a href="#1、现象" class="headerlink" title="1、现象"></a>1、现象</h2><p>错误提示：</p><p>Failed to load resource: net::ERR_FILE_NOT_FOUND</p><h2 id="2、原因"><a href="#2、原因" class="headerlink" title="2、原因"></a>2、原因</h2><p>首先我的vue版本是4.0+<br>静态资源路径错误</p><h2 id="3、解决办法"><a href="#3、解决办法" class="headerlink" title="3、解决办法"></a>3、解决办法</h2><p>创建一个文件“vue.config.js”，最初我的项目也没有，我也创建了一个<br><img src="https://img-blog.csdnimg.cn/dcf61325d5e64232b61d221aff585bb7.png"><br>写入配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    publicPath:<span class="hljs-string">&#x27;./&#x27;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4、结束"><a href="#4、结束" class="headerlink" title="4、结束"></a>4、结束</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Raplit节点搭建</title>
    <link href="/2022/12/29/4%E3%80%81replit%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/12/29/4%E3%80%81replit%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>本文章用于快速搭建“出去”的节点，很简单</p><ul><li>每个月只有100G流量</li><li>中间可能会停止运行，需要手动进入项目开启</li></ul><h2 id="1、需要注册一个Replit账号"><a href="#1、需要注册一个Replit账号" class="headerlink" title="1、需要注册一个Replit账号"></a>1、需要注册一个Replit账号</h2><p>  <a href="https://replit.com/login">点击注册</a><br>  支持Github登录，其他登录也行</p><p><img src="https://img-blog.csdnimg.cn/cf56668270a645edb88bbd9963e4e108.png"></p><h2 id="2、使用这个模板项目"><a href="#2、使用这个模板项目" class="headerlink" title="2、使用这个模板项目"></a>2、使用这个模板项目</h2><p>  <a href="https://replit.com/@sos801107/trojan?v=1">点击获取模板</a></p><p><img src="https://img-blog.csdnimg.cn/6fe5b5bfcd9641f9b30eed1fbe6761ef.png"><br>随便起个名字<br><img src="https://img-blog.csdnimg.cn/90b766c818f34759a0dcee9959a043a1.png"></p><h2 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h2><ol><li>进行完第二步，直接会跳转到这个页面</li><li>然后点击Run<br><img src="https://img-blog.csdnimg.cn/b9d98ce923ab478fb0d8a3795d6bcf23.png"></li></ol><h2 id="4、获取trojan节点"><a href="#4、获取trojan节点" class="headerlink" title="4、获取trojan节点"></a>4、获取trojan节点</h2><p>右面出现二维码，就是运行成功<br>找到左边的 url.txt文件<br>里面就是trojan节点了</p><p><img src="https://img-blog.csdnimg.cn/aa27b9201b164980a5ba3bf8ac684236.png"></p><h2 id="5、随便找个软件导入试试吧"><a href="#5、随便找个软件导入试试吧" class="headerlink" title="5、随便找个软件导入试试吧"></a>5、随便找个软件导入试试吧</h2><p>亲测：<br>Android:  没测试过<br>windows10:  WinXray<br>iPad: 小火箭</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>科学上网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>科学上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长沙理工大学课表APP</title>
    <link href="/2022/12/28/1%E3%80%81%E9%95%BF%E6%B2%99%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E8%AF%BE%E8%A1%A8app(%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%EF%BC%8C%E4%B8%B0%E8%A1%A3%E8%B6%B3%E9%A3%9F)/"/>
    <url>/2022/12/28/1%E3%80%81%E9%95%BF%E6%B2%99%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E8%AF%BE%E8%A1%A8app(%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%EF%BC%8C%E4%B8%B0%E8%A1%A3%E8%B6%B3%E9%A3%9F)/</url>
    
    <content type="html"><![CDATA[<p>最近心血来潮，想着每天看官网看课表有点麻烦，听说目前有一个课表软件，我寻思着应该不太难吧，我就想自己做一个试试。。。</p><h2 id="1、先看截图吧"><a href="#1、先看截图吧" class="headerlink" title="1、先看截图吧"></a>1、先看截图吧</h2><p><img src="https://img-blog.csdnimg.cn/20200520101626598.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2020052010164242.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20200520101652147.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="2、如果有兴趣交流学习，可以加我qq鸭，乐意解疑和共同学习"><a href="#2、如果有兴趣交流学习，可以加我qq鸭，乐意解疑和共同学习" class="headerlink" title="2、如果有兴趣交流学习，可以加我qq鸭，乐意解疑和共同学习"></a>2、如果有兴趣交流学习，可以加我qq鸭，乐意解疑和共同学习</h2><h2 id="3、项目体验-apk下载"><a href="#3、项目体验-apk下载" class="headerlink" title="3、项目体验  apk下载"></a>3、项目体验  apk下载</h2><p>链接：<a href="https://pan.baidu.com/s/1_oAgzPCXp0Pos3UEQcrLow">https://pan.baidu.com/s/1_oAgzPCXp0Pos3UEQcrLow</a><br>提取码：8h52 </p><h2 id="4、项目源码（第一次写Github）"><a href="#4、项目源码（第一次写Github）" class="headerlink" title="4、项目源码（第一次写Github）"></a>4、项目源码（第一次写Github）</h2><p><a href="https://github.com/wyqnyfz/CSUST">https://github.com/wyqnyfz/CSUST</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>App</category>
      
    </categories>
    
    
    <tags>
      
      <tag>APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot项目模板</title>
    <link href="/2022/12/28/3%E3%80%81springboot%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84springboot%EF%BC%89/"/>
    <url>/2022/12/28/3%E3%80%81springboot%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84springboot%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1、创建springboot项目"><a href="#1、创建springboot项目" class="headerlink" title="1、创建springboot项目"></a>1、创建springboot项目</h2><p><img src="https://img-blog.csdnimg.cn/20201216135039999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201216135048284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br>添加图中所示的maven<br><img src="https://img-blog.csdnimg.cn/2020121613505557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br>静静的等待<br><img src="https://img-blog.csdnimg.cn/2020121613514361.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="2、删除没必要的目录（可删可不删）"><a href="#2、删除没必要的目录（可删可不删）" class="headerlink" title="2、删除没必要的目录（可删可不删）"></a>2、删除没必要的目录（可删可不删）</h2><p><img src="https://img-blog.csdnimg.cn/20201216135227767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="3、更改后缀"><a href="#3、更改后缀" class="headerlink" title="3、更改后缀"></a>3、更改后缀</h2><p><img src="https://img-blog.csdnimg.cn/20201216135236936.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><p>添加代码（我用的是oracle数据库，可选mysql自行更改信息）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-comment"># oracle</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-comment">#oracle</span><br>    <span class="hljs-attr">platform:</span> <span class="hljs-string">oracle</span><br>    <span class="hljs-comment">#    driverClassName: com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">oracle.jdbc.driver.OracleDriver</span><br>    <span class="hljs-comment">#    url: jdbc:mysql://localhost:3306/bookdatabase?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:oracle:thin:@localhost:1521:orcl</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">nyfz</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">a1478963a</span><br>    <span class="hljs-attr">devtools:</span><br>      <span class="hljs-attr">restart:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#</span><br>        <span class="hljs-attr">additional-paths:</span> <span class="hljs-string">src/main/java</span> <span class="hljs-comment">#</span><br>        <span class="hljs-attr">exclude:</span> <span class="hljs-string">WEB-INF/**</span><br>      <span class="hljs-attr">freemarker:</span><br>        <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment">#</span><br><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath*:/mapper/**Mapper.xml</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201216135309137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="4、再添加一些maven（复制粘贴进去即可）"><a href="#4、再添加一些maven（复制粘贴进去即可）" class="headerlink" title="4、再添加一些maven（复制粘贴进去即可）"></a>4、再添加一些maven（复制粘贴进去即可）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mp代码生成--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--mp代码生成器--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- hutool工具类--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- jwt --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-comment">&lt;!--devtools热部署--&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201216135645683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201216135658122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="5、添加生成模板类（CodeGenerator）"><a href="#5、添加生成模板类（CodeGenerator）" class="headerlink" title="5、添加生成模板类（CodeGenerator）"></a>5、添加生成模板类（CodeGenerator）</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">package com.wyq.lab;<br><br>import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;<br>import com.baomidou.mybatisplus.core.toolkit.StringPool;<br>import com.baomidou.mybatisplus.core.toolkit.StringUtils;<br>import com.baomidou.mybatisplus.generator.AutoGenerator;<br>import com.baomidou.mybatisplus.generator.InjectionConfig;<br>import com.baomidou.mybatisplus.generator.config.*;<br>import com.baomidou.mybatisplus.generator.config.po.TableInfo;<br>import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;<br>import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;<br><br>import java.util.ArrayList;<br>import java.util.List;<br>import java.util.Scanner;<br><br><span class="hljs-comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span><br>public <span class="hljs-keyword">class</span> CodeGenerator &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 读取控制台内容</span><br><span class="hljs-comment">     * &lt;/p&gt;</span><br><span class="hljs-comment">     */</span><br>    public static String scanner(String tip) &#123;<br>        Scanner scanner = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(System.<span class="hljs-params">in</span>)</span>;<br>        StringBuilder help = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>        help.append(<span class="hljs-string">&quot;请输入&quot;</span> + tip + <span class="hljs-string">&quot;：&quot;</span>);<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(help.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>        <span class="hljs-keyword">if</span> (scanner.has<span class="hljs-constructor">Next()</span>) &#123;<br>            String ipt = scanner.next<span class="hljs-literal">()</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">ipt</span>)</span>) &#123;<br>                return ipt;<br>            &#125;<br>        &#125;<br>        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">MybatisPlusException(<span class="hljs-string">&quot;请输入正确的&quot;</span> + <span class="hljs-params">tip</span> + <span class="hljs-string">&quot;！&quot;</span>)</span>;<br>    &#125;<br><br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-comment">// 代码生成器</span><br>        AutoGenerator mpg = <span class="hljs-keyword">new</span> <span class="hljs-constructor">AutoGenerator()</span>;<br><br>        <span class="hljs-comment">// 全局配置</span><br>        GlobalConfig gc = <span class="hljs-keyword">new</span> <span class="hljs-constructor">GlobalConfig()</span>;<br>        String projectPath = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;user.dir&quot;</span>)</span>;<br>        gc.set<span class="hljs-constructor">OutputDir(<span class="hljs-params">projectPath</span> + <span class="hljs-string">&quot;/src/main/java&quot;</span>)</span>;<br><span class="hljs-comment">//        gc.setOutputDir(&quot;D:\\test&quot;);</span><br>        gc.set<span class="hljs-constructor">Author(<span class="hljs-string">&quot;关注公众号：MarkerHub&quot;</span>)</span>;<br>        gc.set<span class="hljs-constructor">Open(<span class="hljs-params">false</span>)</span>;<br>        <span class="hljs-comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span><br>        gc.set<span class="hljs-constructor">ServiceName(<span class="hljs-string">&quot;%sService&quot;</span>)</span>;<br>        mpg.set<span class="hljs-constructor">GlobalConfig(<span class="hljs-params">gc</span>)</span>;<br><br>        <span class="hljs-comment">// 数据源配置</span><br>        DataSourceConfig dsc = <span class="hljs-keyword">new</span> <span class="hljs-constructor">DataSourceConfig()</span>;<br>        dsc.set<span class="hljs-constructor">Url(<span class="hljs-string">&quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;</span>)</span>;<br>        <span class="hljs-comment">// dsc.setSchemaName(&quot;public&quot;);</span><br>        dsc.set<span class="hljs-constructor">DriverName(<span class="hljs-string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>)</span>;<br>        dsc.set<span class="hljs-constructor">Username(<span class="hljs-string">&quot;nyfz&quot;</span>)</span>;<br>        dsc.set<span class="hljs-constructor">Password(<span class="hljs-string">&quot;a1478963a&quot;</span>)</span>;<br>        mpg.set<span class="hljs-constructor">DataSource(<span class="hljs-params">dsc</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(mpg.get<span class="hljs-constructor">DataSource()</span>);<br><br>        <span class="hljs-comment">// 包配置</span><br>        PackageConfig pc = <span class="hljs-keyword">new</span> <span class="hljs-constructor">PackageConfig()</span>;<br>        pc.set<span class="hljs-constructor">ModuleName(<span class="hljs-params">null</span>)</span>;<br>        pc.set<span class="hljs-constructor">Parent(<span class="hljs-string">&quot;com.wyq.lab&quot;</span>)</span>;<br>        mpg.set<span class="hljs-constructor">PackageInfo(<span class="hljs-params">pc</span>)</span>;<br><br>        <span class="hljs-comment">// 自定义配置</span><br>        InjectionConfig cfg = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InjectionConfig()</span> &#123;<br>            @Override<br>            public void init<span class="hljs-constructor">Map()</span> &#123;<br>                <span class="hljs-comment">// to do nothing</span><br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-comment">// 如果模板引擎是 freemarker</span><br>        String templatePath = <span class="hljs-string">&quot;/templates/mapper.xml.ftl&quot;</span>;<br>        <span class="hljs-comment">// 如果模板引擎是 velocity</span><br>        <span class="hljs-comment">// String templatePath = &quot;/templates/mapper.xml.vm&quot;;</span><br><br>        <span class="hljs-comment">// 自定义输出配置</span><br>        List&lt;FileOutConfig&gt; focList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-comment">// 自定义配置会被优先输出</span><br>        focList.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutConfig(<span class="hljs-params">templatePath</span>)</span> &#123;<br>            @Override<br>            public String output<span class="hljs-constructor">File(TableInfo <span class="hljs-params">tableInfo</span>)</span> &#123;<br>                <span class="hljs-comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span><br>                return projectPath + <span class="hljs-string">&quot;/src/main/resources/mapper/&quot;</span><br>                        + <span class="hljs-string">&quot;/&quot;</span> + tableInfo.get<span class="hljs-constructor">EntityName()</span> + <span class="hljs-string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;<br>            &#125;<br>        &#125;);<br><br>        cfg.set<span class="hljs-constructor">FileOutConfigList(<span class="hljs-params">focList</span>)</span>;<br>        mpg.set<span class="hljs-constructor">Cfg(<span class="hljs-params">cfg</span>)</span>;<br><br>        <span class="hljs-comment">// 配置模板</span><br>        TemplateConfig templateConfig = <span class="hljs-keyword">new</span> <span class="hljs-constructor">TemplateConfig()</span>;<br><br>        templateConfig.set<span class="hljs-constructor">Xml(<span class="hljs-params">null</span>)</span>;<br>        mpg.set<span class="hljs-constructor">Template(<span class="hljs-params">templateConfig</span>)</span>;<br><br>        <span class="hljs-comment">// 策略配置</span><br>        StrategyConfig strategy = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StrategyConfig()</span>;<br>        strategy.set<span class="hljs-constructor">Naming(NamingStrategy.<span class="hljs-params">underline_to_camel</span>)</span>;<br>        strategy.set<span class="hljs-constructor">ColumnNaming(NamingStrategy.<span class="hljs-params">underline_to_camel</span>)</span>;<br>        strategy.set<span class="hljs-constructor">EntityLombokModel(<span class="hljs-params">true</span>)</span>;<br>        strategy.set<span class="hljs-constructor">RestControllerStyle(<span class="hljs-params">true</span>)</span>;<br>        strategy.set<span class="hljs-constructor">Include(<span class="hljs-params">scanner</span>(<span class="hljs-string">&quot;表名，多个英文逗号分割&quot;</span>)</span>.split(<span class="hljs-string">&quot;,&quot;</span>));<br>        strategy.set<span class="hljs-constructor">ControllerMappingHyphenStyle(<span class="hljs-params">true</span>)</span>;<br>        strategy.set<span class="hljs-constructor">TablePrefix(<span class="hljs-string">&quot;m_&quot;</span>)</span>;<br>        mpg.set<span class="hljs-constructor">Strategy(<span class="hljs-params">strategy</span>)</span>;<br>        mpg.set<span class="hljs-constructor">TemplateEngine(<span class="hljs-params">new</span> FreemarkerTemplateEngine()</span>);<br>        mpg.execute<span class="hljs-literal">()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可能会出现这种情况<br><img src="https://img-blog.csdnimg.cn/20201216135959195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br>解决办法<br><img src="https://img-blog.csdnimg.cn/20201216140024169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201216140028449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201216140035174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="6、修改生成模板类的参数"><a href="#6、修改生成模板类的参数" class="headerlink" title="6、修改生成模板类的参数"></a>6、修改生成模板类的参数</h2><p><img src="https://img-blog.csdnimg.cn/20201216140113155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="7、添加2个配置类"><a href="#7、添加2个配置类" class="headerlink" title="7、添加2个配置类"></a>7、添加2个配置类</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">package com.wyq.lab.config;<br><br>import org.springframework.context.annotation.Configuration;<br>import org.springframework.web.servlet.config.annotation.CorsRegistry;<br>import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br>/**<br> * 解决跨域问题<br> */<br>@Configuration<br>public class CorsConfig implements WebMvcConfigurer &#123;<br><br>    @Override<br>    public void addCorsMappings(CorsRegistry registry) &#123;<br>        registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .allowedOriginPatterns(<span class="hljs-string">&quot;*&quot;</span>)<br>                .allowedMethods(<span class="hljs-string">&quot;<span class="hljs-keyword">GET</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">HEAD</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">POST</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">PUT</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">DELETE</span>&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-keyword">OPTIONS</span>&quot;</span>)<br>                .allowCredentials(true)<br>                .maxAge(<span class="hljs-number">3600</span>)<br>                .allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.wyq.lab.config;<br><br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;<br><span class="hljs-keyword">import</span> org.mybatis.spring.<span class="hljs-keyword">annotation</span>.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.transaction.<span class="hljs-keyword">annotation</span>.EnableTransactionManagement;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@MapperScan(<span class="hljs-string">&quot;com.wyq.lab.mapper&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisPlusConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PaginationInterceptor paginationInterceptor() &#123;<br>        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();<br>        <span class="hljs-keyword">return</span> paginationInterceptor;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201216140709658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20201216140714485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="8、开始生成模板"><a href="#8、开始生成模板" class="headerlink" title="8、开始生成模板"></a>8、开始生成模板</h2><p><img src="https://img-blog.csdnimg.cn/20201216140305344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201216140840674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br>会生成上面的目录</p><h2 id="9、找到一个controller-写入一下代码"><a href="#9、找到一个controller-写入一下代码" class="headerlink" title="9、找到一个controller,写入一下代码"></a>9、找到一个controller,写入一下代码</h2><p>这个代码因人而异,就是调用sever层，看看能不能连接数据库<br><img src="https://img-blog.csdnimg.cn/20201216141551613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="10、测试连接"><a href="#10、测试连接" class="headerlink" title="10、测试连接"></a>10、测试连接</h2><p><img src="https://img-blog.csdnimg.cn/20201216141457617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br>成功完毕</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目模板</title>
    <link href="/2022/12/28/2%E3%80%81vue%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84vue%EF%BC%89/"/>
    <url>/2022/12/28/2%E3%80%81vue%E9%A1%B9%E7%9B%AE%EF%BC%88%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84vue%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1、在要创建的目录下面如下操作"><a href="#1、在要创建的目录下面如下操作" class="headerlink" title="1、在要创建的目录下面如下操作"></a>1、在要创建的目录下面如下操作</h2><p><img src="https://img-blog.csdnimg.cn/20201213132851517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="2、输入vue-ui"><a href="#2、输入vue-ui" class="headerlink" title="2、输入vue ui"></a>2、输入vue ui</h2><p><img src="https://img-blog.csdnimg.cn/20201213132933302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="3、进入创建项目，下面一步一步来"><a href="#3、进入创建项目，下面一步一步来" class="headerlink" title="3、进入创建项目，下面一步一步来"></a>3、进入创建项目，下面一步一步来</h2><p><img src="https://img-blog.csdnimg.cn/20201213132946677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201213133021196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201213133043641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20201213133114124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201213133125890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2020121313314377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2020121313315238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201213133226269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201213133234305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201213133240843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2020121313324780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201213133258951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="4、idea导入vue"><a href="#4、idea导入vue" class="headerlink" title="4、idea导入vue"></a>4、idea导入vue</h2><p><img src="https://img-blog.csdnimg.cn/20201213133320931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br>一直next下去，不用任何操作，如果与我的idea版本不一样，请百度解决<br><img src="https://img-blog.csdnimg.cn/2020121313332671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201213133421170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="5、idea安装插件"><a href="#5、idea安装插件" class="headerlink" title="5、idea安装插件"></a>5、idea安装插件</h2><p><img src="https://img-blog.csdnimg.cn/20201213133430743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDgyNjQ4NQ==,size_16,color_FFFFFF,t_70"></p><h2 id="6、End"><a href="#6、End" class="headerlink" title="6、End"></a>6、End</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板标题</title>
    <link href="/2022/12/28/%E6%A8%A1%E6%9D%BF/"/>
    <url>/2022/12/28/%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h2><p>内容1</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">代码<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
